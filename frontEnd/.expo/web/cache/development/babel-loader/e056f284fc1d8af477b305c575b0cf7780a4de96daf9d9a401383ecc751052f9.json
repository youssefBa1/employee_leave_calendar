{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport { ActionSheetIOS } from \"react-native-web/dist/index\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { HiddenItem } from \"../HeaderItems\";\nimport inspectElements from 'react-to-imperative';\nexport var extractOverflowButtonData = function extractOverflowButtonData(hiddenButtons) {\n  return inspectElements(hiddenButtons, extractHiddenItemProps);\n};\nexport var extractHiddenItemProps = function extractHiddenItemProps(_ref) {\n  var props = _ref.props,\n    type = _ref.type;\n  if (type === HiddenItem) {\n    return props;\n  }\n  return true;\n};\nexport var overflowMenuPressHandlerActionSheet = function overflowMenuPressHandlerActionSheet(_ref2) {\n  var hiddenButtons = _ref2.hiddenButtons,\n    _ref2$cancelButtonLab = _ref2.cancelButtonLabel,\n    cancelButtonLabel = _ref2$cancelButtonLab === void 0 ? 'Cancel' : _ref2$cancelButtonLab;\n  var actionTitles = hiddenButtons.map(function (btn) {\n    return btn.title;\n  });\n  actionTitles.unshift(cancelButtonLabel);\n  var disabledButtonIndices = function () {\n    var result = [];\n    hiddenButtons.forEach(function (it, index) {\n      if (it.disabled) {\n        result.push(index + 1);\n      }\n    });\n    return result;\n  }();\n  var destructiveButtonIndex = function () {\n    var result = [];\n    hiddenButtons.forEach(function (it, index) {\n      if (it.destructive) {\n        result.push(index + 1);\n      }\n    });\n    return result;\n  }();\n  ActionSheetIOS.showActionSheetWithOptions({\n    options: actionTitles,\n    cancelButtonIndex: 0,\n    disabledButtonIndices: disabledButtonIndices,\n    destructiveButtonIndex: destructiveButtonIndex\n  }, function (buttonIndex) {\n    if (buttonIndex > 0) {\n      var _hiddenButtons, _hiddenButtons$onPres;\n      (_hiddenButtons = hiddenButtons[buttonIndex - 1]) === null || _hiddenButtons === void 0 ? void 0 : (_hiddenButtons$onPres = _hiddenButtons.onPress) === null || _hiddenButtons$onPres === void 0 ? void 0 : _hiddenButtons$onPres.call(_hiddenButtons);\n    }\n  });\n};\nexport var overflowMenuPressHandlerPopupMenu = function overflowMenuPressHandlerPopupMenu(_ref3) {\n  var hiddenButtons = _ref3.hiddenButtons,\n    overflowButtonRef = _ref3.overflowButtonRef;\n  var enabledButtons = hiddenButtons.filter(function (it) {\n    return it.disabled !== true;\n  });\n  var presenter = UIManager.showPopupMenu;\n  var node = findNodeHandle(overflowButtonRef);\n  if (!presenter || !node) {\n    console.warn('could not present overflow menu');\n    return;\n  }\n  presenter(node, enabledButtons.map(function (btn) {\n    return btn.title;\n  }), function () {\n    return console.debug('overflowBtn error');\n  }, function (eventName, index) {\n    var _enabledButtons$index, _enabledButtons$index2;\n    if (eventName !== 'itemSelected' || typeof index !== 'number') {\n      return;\n    }\n    (_enabledButtons$index = enabledButtons[index]) === null || _enabledButtons$index === void 0 ? void 0 : (_enabledButtons$index2 = _enabledButtons$index.onPress) === null || _enabledButtons$index2 === void 0 ? void 0 : _enabledButtons$index2.call(_enabledButtons$index);\n  });\n};\nexport var overflowMenuPressHandlerDropdownMenu = function overflowMenuPressHandlerDropdownMenu(_ref4) {\n  var children = _ref4.children,\n    overflowButtonRef = _ref4.overflowButtonRef,\n    _private_toggleMenu = _ref4._private_toggleMenu;\n  if (overflowButtonRef) {\n    overflowButtonRef.measureInWindow(function (x, y, width) {\n      _private_toggleMenu({\n        elements: children,\n        x: x + width,\n        y: y\n      });\n    });\n  } else {\n    console.error('overflowButtonRef is null, cannot show overflow menu');\n  }\n};\nexport var defaultOnOverflowMenuPress = Platform.select({\n  ios: overflowMenuPressHandlerActionSheet,\n  default: overflowMenuPressHandlerDropdownMenu\n});","map":{"version":3,"names":["ActionSheetIOS","UIManager","findNodeHandle","HiddenItem","inspectElements","extractOverflowButtonData","hiddenButtons","extractHiddenItemProps","_ref","props","type","overflowMenuPressHandlerActionSheet","_ref2","_ref2$cancelButtonLab","cancelButtonLabel","actionTitles","map","btn","title","unshift","disabledButtonIndices","result","forEach","it","index","disabled","push","destructiveButtonIndex","destructive","showActionSheetWithOptions","options","cancelButtonIndex","buttonIndex","_hiddenButtons","_hiddenButtons$onPres","onPress","call","overflowMenuPressHandlerPopupMenu","_ref3","overflowButtonRef","enabledButtons","filter","presenter","showPopupMenu","node","console","warn","debug","eventName","_enabledButtons$index","_enabledButtons$index2","overflowMenuPressHandlerDropdownMenu","_ref4","children","_private_toggleMenu","measureInWindow","x","y","width","elements","error","defaultOnOverflowMenuPress","Platform","select","ios","default"],"sources":["C:\\Users\\PC\\Documents\\interShip\\frontEnd\\node_modules\\react-navigation-header-buttons\\src\\overflowMenu\\overflowMenuPressHandlers.ts"],"sourcesContent":["import type * as React from 'react';\nimport {\n  Platform,\n  ActionSheetIOS,\n  UIManager,\n  findNodeHandle,\n  View,\n} from 'react-native';\nimport { HiddenItem, HiddenItemProps } from '../HeaderItems';\nimport type { ToggleMenuParam } from './OverflowMenuContext';\nimport inspectElements, { type PropsExtractor } from 'react-to-imperative';\n\ntype OverflowButtonDescriptors = ReadonlyArray<{\n  title: string;\n  onPress?: HiddenItemProps['onPress'];\n  destructive?: boolean;\n  disabled?: boolean;\n}>;\n\nexport const extractOverflowButtonData = (\n  hiddenButtons: React.ReactNode\n): OverflowButtonDescriptors => {\n  return inspectElements(hiddenButtons, extractHiddenItemProps);\n};\n\nexport const extractHiddenItemProps: PropsExtractor<HiddenItemProps> = ({\n  props,\n  type,\n}) => {\n  if (type === HiddenItem) {\n    return props;\n  }\n  return true;\n};\n\nexport type OnOverflowMenuPressParams = {\n  hiddenButtons: OverflowButtonDescriptors;\n  _private_toggleMenu: (params: ToggleMenuParam) => void;\n  overflowButtonRef: null | View;\n  cancelButtonLabel?: string;\n  children: React.ReactNode;\n};\n\nexport const overflowMenuPressHandlerActionSheet = ({\n  hiddenButtons,\n  cancelButtonLabel = 'Cancel',\n}: OnOverflowMenuPressParams) => {\n  let actionTitles = hiddenButtons.map((btn) => btn.title);\n  actionTitles.unshift(cancelButtonLabel);\n\n  const disabledButtonIndices: Array<number> = (() => {\n    let result: number[] = [];\n    hiddenButtons.forEach((it, index) => {\n      if (it.disabled) {\n        result.push(index + 1);\n      }\n    });\n    return result;\n  })();\n\n  const destructiveButtonIndex: Array<number> = (() => {\n    let result: number[] = [];\n    hiddenButtons.forEach((it, index) => {\n      if (it.destructive) {\n        result.push(index + 1);\n      }\n    });\n    return result;\n  })();\n\n  ActionSheetIOS.showActionSheetWithOptions(\n    {\n      options: actionTitles,\n      cancelButtonIndex: 0,\n      disabledButtonIndices,\n      destructiveButtonIndex,\n    },\n    (buttonIndex: number) => {\n      if (buttonIndex > 0) {\n        hiddenButtons[buttonIndex - 1]?.onPress?.();\n      }\n    }\n  );\n};\n\nexport const overflowMenuPressHandlerPopupMenu = ({\n  hiddenButtons,\n  overflowButtonRef,\n}: OnOverflowMenuPressParams) => {\n  const enabledButtons = hiddenButtons.filter((it) => it.disabled !== true);\n  const presenter = UIManager.showPopupMenu;\n  const node = findNodeHandle(overflowButtonRef);\n  if (!presenter || !node) {\n    console.warn('could not present overflow menu');\n    return;\n  }\n\n  presenter(\n    node,\n    enabledButtons.map((btn) => btn.title),\n    () => console.debug('overflowBtn error'),\n    (eventName: string, index?: number) => {\n      if (eventName !== 'itemSelected' || typeof index !== 'number') {\n        return;\n      }\n      enabledButtons[index]?.onPress?.();\n    }\n  );\n};\n\nexport const overflowMenuPressHandlerDropdownMenu = ({\n  children,\n  overflowButtonRef,\n  _private_toggleMenu,\n}: OnOverflowMenuPressParams) => {\n  if (overflowButtonRef) {\n    overflowButtonRef.measureInWindow((x, y, width) => {\n      _private_toggleMenu({ elements: children, x: x + width, y });\n    });\n  } else {\n    console.error('overflowButtonRef is null, cannot show overflow menu');\n  }\n};\n\nexport const defaultOnOverflowMenuPress: (\n  params: OnOverflowMenuPressParams\n) => void = Platform.select({\n  ios: overflowMenuPressHandlerActionSheet,\n  default: overflowMenuPressHandlerDropdownMenu,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}