{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"OverflowIcon\", \"accessibilityLabel\", \"testID\", \"onPress\", \"left\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { extractOverflowButtonData, overflowMenuPressHandlerDropdownMenu, defaultOnOverflowMenuPress } from \"./overflowMenuPressHandlers\";\nimport { OVERFLOW_TOP, useOverflowMenu } from \"./OverflowMenuContext\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { HeaderButton } from \"../HeaderButton\";\nimport { OVERFLOW_BUTTON_TEST_ID } from \"../e2e\";\nimport { ButtonsWrapper } from \"../ButtonsWrapper\";\nimport { Children, isValidElement, useCallback, useRef } from 'react';\nimport * as React from 'react';\nexport var OverflowMenu = function OverflowMenu(_ref) {\n  var children = _ref.children,\n    _ref$OverflowIcon = _ref.OverflowIcon,\n    OverflowIcon = _ref$OverflowIcon === void 0 ? React.createElement(View, null) : _ref$OverflowIcon,\n    _ref$accessibilityLab = _ref.accessibilityLabel,\n    accessibilityLabel = _ref$accessibilityLab === void 0 ? 'More options' : _ref$accessibilityLab,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? OVERFLOW_BUTTON_TEST_ID : _ref$testID,\n    _ref$onPress = _ref.onPress,\n    onPress = _ref$onPress === void 0 ? defaultOnOverflowMenuPress : _ref$onPress,\n    _ref$left = _ref.left,\n    left = _ref$left === void 0 ? false : _ref$left,\n    other = _objectWithoutProperties(_ref, _excluded);\n  var _useOverflowMenu = useOverflowMenu(),\n    toggleMenu = _useOverflowMenu.toggleMenu;\n  var btnRef = useRef(null);\n  var renderButtonElement = useCallback(function (_ref2) {\n    var color = _ref2.color;\n    return isValidElement(OverflowIcon) ? OverflowIcon : React.createElement(OverflowIcon, {\n      color: color\n    });\n  }, [OverflowIcon]);\n  var usedOnPress = useCallback(function () {\n    var titlesAndOnPresses = onPress === overflowMenuPressHandlerDropdownMenu ? [] : extractOverflowButtonData(children);\n    onPress({\n      children: children,\n      hiddenButtons: titlesAndOnPresses,\n      overflowButtonRef: btnRef.current,\n      _private_toggleMenu: toggleMenu\n    });\n  }, [children, onPress, toggleMenu]);\n  var validChildren = Children.toArray(children).filter(isValidElement);\n  if (validChildren.length === 0) {\n    return null;\n  }\n  return React.createElement(ButtonsWrapper, {\n    left: left,\n    style: styles.wrapper\n  }, React.createElement(View, {\n    ref: btnRef,\n    collapsable: false,\n    style: styles.overflowMenuAnchor\n  }), React.createElement(HeaderButton, _extends({\n    title: \"overflow menu\",\n    renderButton: renderButtonElement,\n    onPress: usedOnPress,\n    accessibilityLabel: accessibilityLabel,\n    testID: testID\n  }, other)));\n};\nvar styles = StyleSheet.create({\n  wrapper: {\n    columnGap: 0\n  },\n  overflowMenuAnchor: {\n    position: 'absolute',\n    top: -OVERFLOW_TOP,\n    right: -15,\n    backgroundColor: 'transparent',\n    width: 1,\n    height: 1\n  }\n});","map":{"version":3,"names":["extractOverflowButtonData","overflowMenuPressHandlerDropdownMenu","defaultOnOverflowMenuPress","OVERFLOW_TOP","useOverflowMenu","View","StyleSheet","HeaderButton","OVERFLOW_BUTTON_TEST_ID","ButtonsWrapper","Children","isValidElement","useCallback","useRef","React","OverflowMenu","_ref","children","_ref$OverflowIcon","OverflowIcon","createElement","_ref$accessibilityLab","accessibilityLabel","_ref$testID","testID","_ref$onPress","onPress","_ref$left","left","other","_objectWithoutProperties","_excluded","_useOverflowMenu","toggleMenu","btnRef","renderButtonElement","_ref2","color","usedOnPress","titlesAndOnPresses","hiddenButtons","overflowButtonRef","current","_private_toggleMenu","validChildren","toArray","filter","length","style","styles","wrapper","ref","collapsable","overflowMenuAnchor","_extends","title","renderButton","create","columnGap","position","top","right","backgroundColor","width","height"],"sources":["C:\\Users\\PC\\Documents\\interShip\\frontEnd\\node_modules\\react-navigation-header-buttons\\src\\overflowMenu\\OverflowMenu.tsx"],"sourcesContent":["import {\n  extractOverflowButtonData,\n  overflowMenuPressHandlerDropdownMenu,\n  defaultOnOverflowMenuPress,\n  type OnOverflowMenuPressParams,\n} from './overflowMenuPressHandlers';\nimport { OVERFLOW_TOP, useOverflowMenu } from './OverflowMenuContext';\nimport { View, StyleSheet, type ColorValue } from 'react-native';\nimport { HeaderButton, type HeaderButtonProps } from '../HeaderButton';\nimport { OVERFLOW_BUTTON_TEST_ID } from '../e2e';\nimport { ButtonsWrapper } from '../ButtonsWrapper';\nimport {\n  Children,\n  ComponentType,\n  isValidElement,\n  useCallback,\n  useRef,\n  type ReactElement,\n  type ReactNode,\n} from 'react';\nimport * as React from 'react';\n\nexport type OverflowMenuProps = Omit<\n  HeaderButtonProps,\n  'onPress' | 'title' | 'renderButton'\n> & {\n  children: ReactNode;\n  OverflowIcon: ReactElement | ComponentType<{ color?: ColorValue }>;\n  onPress?: (params: OnOverflowMenuPressParams) => any;\n  left?: boolean;\n};\n\nexport const OverflowMenu = ({\n  children,\n  OverflowIcon = <View />,\n  accessibilityLabel = 'More options',\n  testID = OVERFLOW_BUTTON_TEST_ID,\n  onPress = defaultOnOverflowMenuPress,\n  left = false, // this is needed only when OverflowMenu is rendered without HeaderButtons,\n  ...other\n}: OverflowMenuProps) => {\n  const { toggleMenu } = useOverflowMenu();\n\n  const btnRef = useRef<View | null>(null);\n  const renderButtonElement = useCallback(\n    ({ color }: { color?: ColorValue }) => {\n      return isValidElement<any>(OverflowIcon) ? (\n        OverflowIcon\n      ) : (\n        <OverflowIcon color={color} />\n      );\n    },\n    [OverflowIcon]\n  );\n\n  const usedOnPress = useCallback(() => {\n    const titlesAndOnPresses =\n      onPress === overflowMenuPressHandlerDropdownMenu\n        ? []\n        : extractOverflowButtonData(children);\n    onPress({\n      children,\n      hiddenButtons: titlesAndOnPresses,\n      overflowButtonRef: btnRef.current,\n      _private_toggleMenu: toggleMenu,\n    });\n  }, [children, onPress, toggleMenu]);\n\n  const validChildren = Children.toArray(children).filter(isValidElement);\n  if (validChildren.length === 0) {\n    return null;\n  }\n\n  return (\n    <ButtonsWrapper left={left} style={styles.wrapper}>\n      <View\n        ref={btnRef}\n        collapsable={false}\n        style={styles.overflowMenuAnchor}\n      />\n      <HeaderButton\n        title=\"overflow menu\"\n        renderButton={renderButtonElement}\n        onPress={usedOnPress}\n        accessibilityLabel={accessibilityLabel}\n        testID={testID}\n        {...other}\n      />\n    </ButtonsWrapper>\n  );\n};\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    columnGap: 0,\n  },\n  overflowMenuAnchor: {\n    // these are really just needed bcs of the native android popup menu\n    position: 'absolute',\n    top: -OVERFLOW_TOP,\n    // TODO android actually has a little gap on the right of the menu\n    right: -15,\n    backgroundColor: 'transparent',\n    width: 1,\n    height: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}