{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { getDefaultSpaceAboveMenu } from \"./statusBarUtils\";\nimport { Menu } from \"./vendor/Menu\";\nimport { useTheme } from '@react-navigation/native';\nimport { createContext, useCallback, useContext, useMemo, useState } from 'react';\nimport * as React from 'react';\nimport { ButtonsExtraMarginContext } from \"../ButtonsWrapper\";\nexport var OVERFLOW_TOP = 15;\nvar warn = function warn() {\n  console.warn('It seems like you tried to open the overflow menu using the overflowMenuPressHandlerDropdownMenu' + ' - which is the default handler on android - but you forgot to wrap your root component in <HeaderButtonsProvider />.' + 'Please check the installation instructions in the react-navigation-header-buttons readme :)');\n};\nvar OverflowMenuContext = createContext({\n  toggleMenu: warn\n});\nexport var useOverflowMenu = function useOverflowMenu() {\n  return useContext(OverflowMenuContext);\n};\nexport var HeaderButtonsProvider = function HeaderButtonsProvider(_ref) {\n  var children = _ref.children,\n    spaceAboveMenu = _ref.spaceAboveMenu,\n    stackType = _ref.stackType;\n  var _useState = useState({\n      visible: false,\n      position: {\n        x: Dimensions.get('window').width - 10,\n        y: 40\n      },\n      elements: null\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    menuState = _useState2[0],\n    setMenuState = _useState2[1];\n  var _useTheme = useTheme(),\n    card = _useTheme.colors.card;\n  var hideMenu = useCallback(function () {\n    setMenuState(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        visible: false\n      });\n    });\n  }, []);\n  var toggleMenu = useCallback(function (params) {\n    var extraDelta = spaceAboveMenu != null ? spaceAboveMenu : getDefaultSpaceAboveMenu();\n    setMenuState(function (prevState) {\n      var position = params ? {\n        x: params.x,\n        y: params.y + extraDelta\n      } : prevState.position;\n      var elements = params ? params.elements : prevState.elements;\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        position: position,\n        elements: elements,\n        visible: !prevState.visible\n      });\n    });\n  }, [spaceAboveMenu]);\n  var visible = menuState.visible,\n    position = menuState.position,\n    elements = menuState.elements;\n  var value = useMemo(function () {\n    return {\n      toggleMenu: toggleMenu\n    };\n  }, [toggleMenu]);\n  var extraMarginValue = stackType === 'native' ? 'alreadyHandled' : 'toBeHandled';\n  return React.createElement(OverflowMenuContext.Provider, {\n    value: value\n  }, React.createElement(ButtonsExtraMarginContext.Provider, {\n    value: extraMarginValue\n  }, React.Children.only(children), React.createElement(Menu, {\n    visible: visible,\n    onDismiss: hideMenu,\n    anchor: position,\n    contentStyle: {\n      backgroundColor: card\n    }\n  }, elements)));\n};","map":{"version":3,"names":["getDefaultSpaceAboveMenu","Menu","useTheme","createContext","useCallback","useContext","useMemo","useState","React","ButtonsExtraMarginContext","OVERFLOW_TOP","warn","console","OverflowMenuContext","toggleMenu","useOverflowMenu","HeaderButtonsProvider","_ref","children","spaceAboveMenu","stackType","_useState","visible","position","x","Dimensions","get","width","y","elements","_useState2","_slicedToArray","menuState","setMenuState","_useTheme","card","colors","hideMenu","prevState","_objectSpread","params","extraDelta","value","extraMarginValue","createElement","Provider","Children","only","onDismiss","anchor","contentStyle","backgroundColor"],"sources":["C:\\Users\\PC\\Documents\\interShip\\frontEnd\\node_modules\\react-navigation-header-buttons\\src\\overflowMenu\\OverflowMenuContext.tsx"],"sourcesContent":["import { Dimensions } from 'react-native';\nimport { getDefaultSpaceAboveMenu } from './statusBarUtils';\nimport { Menu } from './vendor/Menu';\nimport { useTheme } from '@react-navigation/native';\nimport {\n  createContext,\n  ReactElement,\n  ReactNode,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from 'react';\nimport * as React from 'react';\n\nimport { ButtonsExtraMarginContext } from '../ButtonsWrapper';\n\nexport type ToggleMenuParam = {\n  elements: React.ReactNode;\n  x: number;\n  y: number;\n};\n\nexport const OVERFLOW_TOP = 15;\n\nconst warn = () => {\n  // the noop value will be replaced by HeaderButtonsProvider rendered in app root\n  console.warn(\n    'It seems like you tried to open the overflow menu using the overflowMenuPressHandlerDropdownMenu' +\n      ' - which is the default handler on android - but you forgot to wrap your root component in <HeaderButtonsProvider />.' +\n      'Please check the installation instructions in the react-navigation-header-buttons readme :)'\n  );\n};\nconst OverflowMenuContext = createContext<{\n  toggleMenu: (params?: ToggleMenuParam) => void;\n}>({\n  toggleMenu: warn,\n});\n\nexport const useOverflowMenu = () => useContext(OverflowMenuContext);\n\ntype Props = {\n  children: ReactElement;\n  stackType: 'native' | 'js';\n  spaceAboveMenu?: number;\n};\n\nexport const HeaderButtonsProvider = ({\n  children,\n  spaceAboveMenu,\n  stackType,\n}: Props) => {\n  const [menuState, setMenuState] = useState({\n    visible: false,\n    position: {\n      x: Dimensions.get('window').width - 10,\n      y: 40,\n    },\n    elements: null as ReactNode | null,\n  });\n\n  const {\n    colors: { card },\n  } = useTheme();\n\n  const hideMenu = useCallback(() => {\n    setMenuState((prevState) => ({\n      ...prevState,\n      visible: false,\n    }));\n  }, []);\n\n  const toggleMenu = useCallback(\n    (params?: ToggleMenuParam) => {\n      const extraDelta = spaceAboveMenu ?? getDefaultSpaceAboveMenu();\n\n      setMenuState((prevState) => {\n        const position = params\n          ? { x: params.x, y: params.y + extraDelta }\n          : prevState.position;\n        const elements = params ? params.elements : prevState.elements;\n\n        return {\n          ...prevState,\n          position,\n          elements,\n          visible: !prevState.visible,\n        };\n      });\n    },\n    [spaceAboveMenu]\n  );\n\n  const { visible, position, elements } = menuState;\n  const value = useMemo(() => ({ toggleMenu }), [toggleMenu]);\n  const extraMarginValue =\n    stackType === 'native' ? 'alreadyHandled' : 'toBeHandled';\n\n  return (\n    <OverflowMenuContext.Provider value={value}>\n      <ButtonsExtraMarginContext.Provider value={extraMarginValue}>\n        {React.Children.only(children)}\n        <Menu\n          visible={visible}\n          onDismiss={hideMenu}\n          anchor={position}\n          contentStyle={{ backgroundColor: card }}\n        >\n          {elements}\n        </Menu>\n      </ButtonsExtraMarginContext.Provider>\n    </OverflowMenuContext.Provider>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}